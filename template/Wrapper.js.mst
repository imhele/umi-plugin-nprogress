{{#enable}}
import { connect } from 'dva';
import 'nprogress/nprogress.css';
import NProgress from 'nprogress';
{{/enable}}
import { PureComponent } from 'react';
{{#routeOnly}}
let oldHref = '';
{{/routeOnly}}
const isLoading = (props) => {
  let loading = false;
  {{#routeOnly}}
  if (oldHref === window.location.href) {
    return false;
  }
  {{/routeOnly}}
  {{#global}}
  loading = props.loading.global;
  {{/global}}
  {{#modelsArr}}
  const modelsArr = [{{#modelsArr}}{{{.}}}, {{/modelsArr}}];
  if (!loading && props.loading.models) {
    loading = Object.keys(props.loading.models)
      .filter(model => props.loading.models[model])
      .some(model => modelsArr.includes(model));
  }
  {{/modelsArr}}
  {{#effectsArr}}
  const effectsArr = [{{#effectsArr}}{{{.}}}, {{/effectsArr}}];
  if (!loading && props.loading.effects) {
    loading = Object.keys(props.loading.effects)
      .filter(effect => props.loading.effects[effect])
      .some(effect => effectsArr.includes(effect));
  }
  {{/effectsArr}}
  {{#modelsRegExp}}
  if (!loading && props.loading.models) {
    loading = Object.keys(props.loading.models)
      .filter(model => props.loading.models[model])
      .some(model => {{{modelsRegExp}}}.test(model));
  }
  {{/modelsRegExp}}
  {{#effectsRegExp}}
  if (!loading && props.loading.effects) {
    loading = Object.keys(props.loading.effects)
      .filter(effect => props.loading.effects[effect])
      .some(effect => {{{effectsRegExp}}}.test(effect));
  }
  {{/effectsRegExp}}
  return loading;
};

class Wrapper extends PureComponent {
  {{#configuration}}
  constructor(props) {
    NProgress.configure({{{configuration}}});
    super(props);
  }
  {{/configuration}}

  render() {
    {{#enable}}
    if (isLoading(this.props)) {
      if (!NProgress.isStarted()) {
        NProgress.start();
      }
    } else {
      if (NProgress.isStarted()) {
        NProgress.done();
      }
      {{#routeOnly}}
      oldHref = window.location.href;
      {{/routeOnly}}
    }
    {{/enable}}
    return this.props.children;
  }
};

export default {{#enable}}connect(({ loading }) => ({
  loading,
}))({{/enable}}Wrapper{{#enable}}){{/enable}};
